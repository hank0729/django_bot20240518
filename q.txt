import os

def get_unique_file_path(base_path):

    if not os.path.exists(base_path):
        return base_path

    base, ext = os.path.splitext(base_path)
    counter = 1
    new_path = f"{base}({counter}){ext}"
    
    while os.path.exists(new_path):
        counter += 1
        new_path = f"{base}({counter}){ext}"
    
    return new_path

@csrf_exempt
def callback(request):
    if request.method == "POST":
        signature = request.META["HTTP_X_LINE_SIGNATURE"]
        body = request.body.decode("utf-8")

        try:
            events = parser.parse(body, signature)  # Parse the events
        except InvalidSignatureError:
            return HttpResponseForbidden()
        except LineBotApiError:
            return HttpResponseBadRequest()

        for event in events:
            if isinstance(event, MessageEvent) and event.message.type == "image":
                line_id = event.source.user_id
                image_content = line_bot_api.get_message_content(event.message.id)
                image_name = line_id + ".png"
                base_path = "./static/" + image_name
                unique_path = get_unique_file_path(base_path)
                
                with open(unique_path, "wb") as fd:
                    for chunk in image_content.iter_content():
                        fd.write(chunk)
                
                img = cv2.imread(unique_path)
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                results = model(img)
                result_df = results.pandas().xyxy[0]
                results.save()
                image = cv2.imread("./runs/detect/exp/image0.jpg")
                final_path = get_unique_file_path(f"./static/{line_id}.png")
                cv2.imwrite(final_path, image)
                
                messages = [
                    ImageSendMessage(
                        original_content_url=domain + final_path,
                        preview_image_url=domain + final_path,
                    )
                ]
                
                result_df["fat"] = result_df["name"].map(food_dict)
                result_df["chinese_name"] = result_df["name"].map(food_name)
                content = ""
                
                for i in range(len(result_df)):
                    name = result_df["chinese_name"][i]
                    fat = result_df["fat"][i]
                    food_content = f"{name} 熱量為 {fat} 大卡(kcals)"
                    content = content + food_content + "\n"
                
                total_fat = result_df["fat"].sum()
                total_content = f"總共: {total_fat} 大卡(kcals)"
                content = content + total_content
                
                messages.append(TextSendMessage(f"{content}"))
                messages.append(
                    TemplateSendMessage(
                        alt_text="Buttons template",
                        template=ButtonsTemplate(
                            title="請問是否正確?",
                            text="請問是否正確?",
                            actions=[
                                MessageTemplateAction(label="正確", text="正確"),
                                MessageTemplateAction(label="錯誤", text="錯誤"),
                            ],
                        ),
                    )
                )
                
                shutil.rmtree("./runs")
                line_bot_api.reply_message(event.reply_token, messages)
            
            elif isinstance(event, MessageEvent) and event.message.type == "text":
                if event.message.text in ["正確", "錯誤"]:
                    line_id = event.source.user_id
                    df = pd.read_excel("./datasets/label.xlsx")
                    T = time.ctime(time.time()).replace(" ", "-").replace(":", "-")
                    new_line = pd.DataFrame(
                        {"Column1": [T], "Column2": [event.message.text]}
                    )
                    df = pd.concat([df, new_line], ignore_index=True)
                    df.to_excel("./datasets/label.xlsx", index=False)
                    image = cv2.imread(f"./static/{line_id}.png")
                    cv2.imwrite(f"./datasets/images/{T}.png", image)
                else:
                    user_message = event.message.text
                    reply_msg = chatgpt.get_response(user_message)
                    line_bot_api.reply_message(
                        event.reply_token, TextSendMessage(text=reply_msg)
                    )
            
            elif isinstance(event, FollowEvent):
                line_id = event.source.user_id
                days = 1
                new_first = First.objects.create(lineid=line_id)
                new_seven = Seven.objects.create(lineid=line_id)
                new_month = Month.objects.create(lineid=line_id)
                new_two_month = TwoMonth.objects.create(lineid=line_id)
                new_three_month = ThreeMonth.objects.create(lineid=line_id)

                main = Main.objects.create(
                    lineid=line_id,
                    days=days,
                    first=new_first,
                    first_key=new_first.id,
                    seven=new_seven,
                    seven_key=new_seven.id,
                    month=new_month,
                    month_key=new_month.id,
                    twomonth=new_two_month,
                    twomonth_key=new_two_month.id,
                    threemonth=new_three_month,
                    threemonth_key=new_three_month.id
                )

                home_url = "https://" + f"{settings.NGROK_HOST}/{line_id}/home/"
                line_bot_api.push_message(line_id, TextSendMessage(text=home_url))

                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text="感謝您加我好友!請幫忙填個問卷調查呦")
                )

        return HttpResponse()
    else:
        return HttpResponseBadRequest()
