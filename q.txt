def handle_image_message(event):
    line_id = event.source.user_id
    image_content = line_bot_api.get_message_content(event.message.id)
    image_name = f"{line_id}.png"
    unique_path = get_unique_file_path("static", image_name)

    # Save the received image
    with open(unique_path, "wb") as fd:
        for chunk in image_content.iter_content():
            fd.write(chunk)

    # Read the saved image
    img = cv2.imread(unique_path)
    if img is None:
        logger.error(f"Failed to read image from {unique_path}")
        return

    # Process the image using the model
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = model(img)
    result_df = results.pandas().xyxy[0]
    results.save()

    # Get the new unique path for the processed image
    detect_image_path = get_unique_file_path("static", image_name)
    detect_image_name = os.path.basename(detect_image_path)

    # Read and save the processed image
    detected_image = cv2.imread("./runs/detect/exp/image0.jpg")
    if detected_image is None:
        logger.error("Failed to read detected image.")
        return

    # Save the new processed image with a unique name
    cv2.imwrite(detect_image_path, detected_image)

    # Create the image URL to send
    result_image_url = f"{domain}static/{detect_image_name}"

    # Create messages to send
    messages = [
        ImageSendMessage(
            original_content_url=result_image_url,
            preview_image_url=result_image_url,
        )
    ]

    # Generate text content for detected items
    result_df["fat"] = result_df["name"].map(food_dict)
    result_df["chinese_name"] = result_df["name"].map(food_name)
    content = ""

    for i in range(len(result_df)):
        name = result_df["chinese_name"][i]
        fat = result_df["fat"][i]
        food_content = f"{name} 熱量為 {fat} 大卡(kcals)"
        content += food_content + "\n"

    total_fat = result_df["fat"].sum()
    total_content = f"總共: {total_fat} 大卡(kcals)"
    content += total_content

    messages.append(TextSendMessage(f"{content}"))
    messages.append(
        TemplateSendMessage(
            alt_text="Buttons template",
            template=ButtonsTemplate(
                title="請問是否正確?",
                text="請問是否正確?",
                actions=[
                    MessageTemplateAction(label="正確", text="正確"),
                    MessageTemplateAction(label="錯誤", text="錯誤"),
                ],
            ),
        )
    )

    # Clean up the runs directory
    shutil.rmtree("./runs")

    # Send the messages
    try:
        line_bot_api.reply_message(event.reply_token, messages)
    except LineBotApiError as e:
        logger.error(f"LineBotApiError: {e}")
        line_bot_api.push_message(event.source.user_id, messages)

def get_unique_file_path(directory, filename):
    base, ext = os.path.splitext(filename)
    unique_path = os.path.join(directory, filename)

    if not os.path.exists(unique_path):
        return unique_path

    counter = 1
    while os.path.exists(unique_path):
        unique_path = os.path.join(directory, f"{base}({counter}){ext}")
        counter += 1

    return unique_path
